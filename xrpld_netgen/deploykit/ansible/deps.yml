---
- hosts: all # run on the "all" hosts category from ansible-hosts.txt
  # become means be superuser
  become: true
  remote_user: root
  tasks:
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add apt repository for stable version
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present
  - name: install nodejs prerequisites
    apt:
      name:
        - apt-transport-https
        - gcc
        - g++
        - make
      state: present
  - name: add nodejs apt key
    apt_key:
      url: https://deb.nodesource.com/gpgkey/nodesource.gpg.key
      state: present
  - name: add nodejs repository
    apt_repository:
      repo: deb https://deb.nodesource.com/node_16.x focal main
      state: present
      update_cache: yes
  - name: install nodejs
    apt:
      name: nodejs
      state: present
  - name: Install docker and its dependecies
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
  - name: verify docker installed, enabled, and started
    service:
      name: docker
      state: started
      enabled: yes
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb >= 0
  - name: add ubuntu user to docker
    user:
      name: ubuntu
      group: docker
  - name: Ensure UFW is installed
    apt:
      name: ufw
      state: present
  - name: Enable UFW
    ufw:
      state: enabled
      policy: allow
      direction: incoming
  - name: Enable SSH
    ufw:
      rule: limit
      port: "{{ ssh_port }}"
      proto: tcp
  - name: Enable WS
    ufw:
      rule: allow
      port: "{{ ws_port }}"
      proto: tcp
  - name: Enable Peer
    ufw:
      rule: allow
      port: "{{ peer_port }}"
      proto: tcp
  - name: Stop and disable the unattended-upgrades service
    service:
      name: unattended-upgrades
      state: stopped
      enabled: no
  - name: reboot to apply swap disable
    reboot:
      reboot_timeout: 180 #allow 3 minutes for reboot to happen
